// Code generated by Lorca. DO NOT EDIT.
package gingershrew

import (
	"bytes"
	"errors"
	"net/http"
	"os"
	"time"
)

var assets = map[string][]byte{}

var FS = &fs{}

type fs struct {}

func (fs *fs) Open(name string) (http.File, error) {
	if name == "/" {
		return fs, nil;
	}
	b, ok := assets[name]
	if !ok {
		return nil, os.ErrNotExist
	}
	return &file{name: name, size: len(b), Reader: bytes.NewReader(b)}, nil
}

func (fs *fs) Close() error { return nil }
func (fs *fs) Read(p []byte) (int, error) { return 0, nil }
func (fs *fs) Seek(offset int64, whence int) (int64, error) { return 0, nil }
func (fs *fs) Stat() (os.FileInfo, error) { return fs, nil }
func (fs *fs) Name() string { return "/" }
func (fs *fs) Size() int64 { return 0 }
func (fs *fs) Mode() os.FileMode { return 0755}
func (fs *fs) ModTime() time.Time{ return time.Time{} }
func (fs *fs) IsDir() bool { return true }
func (fs *fs) Sys() interface{} { return nil }
func (fs *fs) Readdir(count int) ([]os.FileInfo, error) {
	files := []os.FileInfo{}
	for name, data := range assets {
		files = append(files, &file{name: name, size: len(data), Reader: bytes.NewReader(data)})
	}
	return files, nil
}

type file struct {
	name string
	size int
	*bytes.Reader 
}

func (f *file) Close() error { return nil }
func (f *file) Readdir(count int) ([]os.FileInfo, error) { return nil, errors.New("not supported") }
func (f *file) Stat() (os.FileInfo, error) { return f, nil }
func (f *file) Name() string { return f.name }
func (f *file) Size() int64 { return int64(f.size) }
func (f *file) Mode() os.FileMode { return 0644 }
func (f *file) ModTime() time.Time{ return time.Time{} }
func (f *file) IsDir() bool { return false }
func (f *file) Sys() interface{} { return nil }

func init() {
	assets[""] = []byte{0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xed, 0xd4, 0x4d, 0x4b, 0xc3, 0x30, 0x18, 0x07, 0xf0, 0x9e, 0xf7, 0x29, 0x1e, 0x76, 0xd2, 0x31, 0x9b, 0xbe, 0xae, 0xa0, 0x47, 0x41, 0x10, 0x26, 0x0c, 0xf4, 0xe2, 0x31, 0x6b, 0xd3, 0x35, 0xb3, 0x6b, 0x4a, 0x92, 0x3a, 0xf4, 0xd3, 0x9b, 0xfa, 0x7e, 0xd8, 0x14, 0xa5, 0x28, 0xe2, 0xff, 0x77, 0x09, 0x69, 0xd2, 0x27, 0x6d, 0xff, 0x0f, 0x5d, 0xc9, 0x66, 0x25, 0xb4, 0xa9, 0xb4, 0xd8, 0xb2, 0x42, 0x94, 0xbc, 0xab, 0xad, 0x61, 0xde, 0xb0, 0x02, 0x27, 0x4b, 0xd3, 0x7e, 0x0c, 0xb3, 0x34, 0x78, 0x3f, 0xbe, 0xf0, 0xc2, 0x78, 0x96, 0xa5, 0x51, 0x10, 0x24, 0x49, 0xe4, 0x05, 0x61, 0x1c, 0x87, 0x89, 0x47, 0xe9, 0xc0, 0xcf, 0xb1, 0x53, 0x67, 0x2c, 0xd7, 0x44, 0x9e, 0x2c, 0x6e, 0x3e, 0xdc, 0xf7, 0xd9, 0xfa, 0x1f, 0xb5, 0xda, 0x95, 0x7f, 0xab, 0x45, 0x39, 0x60, 0x13, 0x7c, 0x29, 0xff, 0x34, 0x74, 0xf9, 0x27, 0x91, 0x5b, 0x46, 0xfe, 0x3f, 0x60, 0x7f, 0xfe, 0x79, 0xc5, 0x9b, 0x46, 0xd4, 0x47, 0xfd, 0xc4, 0xf8, 0x6b, 0xf3, 0xfd, 0x33, 0xfa, 0x80, 0x67, 0x49, 0xb2, 0x37, 0xff, 0x78, 0x96, 0xbe, 0xe5, 0x1f, 0xcf, 0x5c, 0xfe, 0x59, 0xec, 0x7e, 0x03, 0x14, 0x0c, 0xf7, 0x9a, 0xfb, 0xfd, 0xf3, 0xfc, 0xd9, 0x84, 0xae, 0x2a, 0x69, 0xe8, 0x52, 0x75, 0x3a, 0x17, 0x74, 0xaa, 0x0a, 0x41, 0x67, 0x4a, 0x6f, 0xc8, 0x5d, 0x33, 0xdd, 0x72, 0x2d, 0x72, 0x4b, 0x56, 0x91, 0xad, 0x04, 0x59, 0xa1, 0x37, 0x86, 0x54, 0xf9, 0x38, 0xb9, 0x50, 0xf7, 0xb2, 0xae, 0x39, 0x2d, 0xba, 0x65, 0x2d, 0xf3, 0x11, 0x4d, 0x68, 0x2e, 0x73, 0xd1, 0x18, 0x31, 0xa5, 0x5b, 0x9f, 0x22, 0x3f, 0xf0, 0xe9, 0xbc, 0x24, 0x4e, 0xb9, 0x6a, 0xef, 0x5e, 0xef, 0x59, 0xcc, 0x69, 0xcb, 0x0d, 0x35, 0xca, 0x52, 0x21, 0x8d, 0xd5, 0x72, 0xd9, 0x59, 0x51, 0xd0, 0x56, 0xda, 0xca, 0x6d, 0x90, 0xa6, 0x2f, 0x53, 0xca, 0xda, 0xd5, 0xb8, 0x56, 0x1d, 0xe5, 0xbc, 0x21, 0xb5, 0xb4, 0x5c, 0xba, 0xa1, 0x11, 0xc4, 0x2d, 0x55, 0xd6, 0xb6, 0xc7, 0x8c, 0x6d, 0x9e, 0xce, 0xf6, 0x95, 0x5e, 0x31, 0x57, 0x93, 0xb9, 0xd3, 0x98, 0x4f, 0x13, 0x36, 0x1a, 0xf5, 0xbd, 0x7a, 0x30, 0xe6, 0x6d, 0xeb, 0x77, 0x6d, 0xc1, 0xad, 0xf0, 0x9f, 0x9b, 0x78, 0x3c, 0xa5, 0xf1, 0x73, 0x77, 0x8f, 0x0f, 0x4f, 0x46, 0xbf, 0xfd, 0xd1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf4, 0x00, 0x88, 0x64, 0x4f, 0xa2, 0x00, 0x28, 0x00, 0x00}
}
